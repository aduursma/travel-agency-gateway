name: Release Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Build
        run: mvn -B -U -Drevision=${GITHUB_SHA::8} clean package -s settings.xml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_ORGANIZATION_TOKEN }}

  sonar:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Sonar Scan
        run: mvn -B -U -Drevision=${GITHUB_SHA::8} clean verify -Dsonar.login=${{ secrets.SONAR_TOKEN }} -Psonar -s settings.xml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_ORGANIZATION_TOKEN }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Publish to GitHub Packages and DockerHub
        run: mvn -B -U -Drevision=${GITHUB_SHA::8} -DskipTests clean deploy -s settings.xml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_ORGANIZATION_TOKEN }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}

  release:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Prepare Release Asset
        run: mvn -B -U -Drevision=${GITHUB_SHA::8} -DskipTests clean jar:jar -s settings.xml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_ORGANIZATION_TOKEN }}

      - name: Get artifactId
        id: get_artifact_id
        uses: christian-draeger/read-properties@1.0.1
        with:
          path: './target/maven-archiver/pom.properties'
          property: 'artifactId'

      - name: Get version
        id: get_version
        uses: christian-draeger/read-properties@1.0.1
        with:
          path: './target/maven-archiver/pom.properties'
          property: 'version'

      - name: Set environment variables
        env:
          ARTIFACT_ID: ${{ steps.get_artifact_id.outputs.value }}
          ARTIFACT_VERSION: ${{ steps.get_version.outputs.value }}
        run: |
          echo "::set-env name=ARTIFACT_ID::$ARTIFACT_ID"
          echo "::set-env name=ARTIFACT_VERSION::$ARTIFACT_VERSION"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_ORGANIZATION_TOKEN }}
        with:
          tag_name: ${{ env.ARTIFACT_VERSION }}
          release_name: Release ${{ env.ARTIFACT_VERSION }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_ORGANIZATION_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./target/${{ env.ARTIFACT_ID }}-${{ env.ARTIFACT_VERSION }}.jar
          asset_name: ${{ env.ARTIFACT_ID }}-${{ env.ARTIFACT_VERSION }}.jar
          asset_content_type: application/java-archive
